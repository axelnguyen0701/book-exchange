// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ListingCreated extends ethereum.Event {
  get params(): ListingCreated__Params {
    return new ListingCreated__Params(this);
  }
}

export class ListingCreated__Params {
  _event: ListingCreated;

  constructor(event: ListingCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get instantPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startingPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get allowBid(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get sold(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class ListingUpdated extends ethereum.Event {
  get params(): ListingUpdated__Params {
    return new ListingUpdated__Params(this);
  }
}

export class ListingUpdated__Params {
  _event: ListingUpdated;

  constructor(event: ListingUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get instantPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startingPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get allowBid(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get sold(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BookMarketplace__fetchItemsListedResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get instantPrice(): BigInt {
    return this[3].toBigInt();
  }

  get startingPrice(): BigInt {
    return this[4].toBigInt();
  }

  get allowBid(): boolean {
    return this[5].toBoolean();
  }

  get bidList(): Array<
    BookMarketplace__fetchItemsListedResultValue0BidListStruct
  > {
    return this[6].toTupleArray<
      BookMarketplace__fetchItemsListedResultValue0BidListStruct
    >();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class BookMarketplace__fetchItemsListedResultValue0BidListStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get bidAmount(): BigInt {
    return this[1].toBigInt();
  }

  get chosen(): boolean {
    return this[2].toBoolean();
  }
}

export class BookMarketplace__fetchListingsResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get instantPrice(): BigInt {
    return this[3].toBigInt();
  }

  get startingPrice(): BigInt {
    return this[4].toBigInt();
  }

  get allowBid(): boolean {
    return this[5].toBoolean();
  }

  get bidList(): Array<
    BookMarketplace__fetchListingsResultValue0BidListStruct
  > {
    return this[6].toTupleArray<
      BookMarketplace__fetchListingsResultValue0BidListStruct
    >();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class BookMarketplace__fetchListingsResultValue0BidListStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get bidAmount(): BigInt {
    return this[1].toBigInt();
  }

  get chosen(): boolean {
    return this[2].toBoolean();
  }
}

export class BookMarketplace__fetchMyNFTsResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get instantPrice(): BigInt {
    return this[3].toBigInt();
  }

  get startingPrice(): BigInt {
    return this[4].toBigInt();
  }

  get allowBid(): boolean {
    return this[5].toBoolean();
  }

  get bidList(): Array<BookMarketplace__fetchMyNFTsResultValue0BidListStruct> {
    return this[6].toTupleArray<
      BookMarketplace__fetchMyNFTsResultValue0BidListStruct
    >();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class BookMarketplace__fetchMyNFTsResultValue0BidListStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get bidAmount(): BigInt {
    return this[1].toBigInt();
  }

  get chosen(): boolean {
    return this[2].toBoolean();
  }
}

export class BookMarketplace__getBidListResultValue0Struct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get bidAmount(): BigInt {
    return this[1].toBigInt();
  }

  get chosen(): boolean {
    return this[2].toBoolean();
  }
}

export class BookMarketplace__getHighestBidResultValue0Struct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get bidAmount(): BigInt {
    return this[1].toBigInt();
  }

  get chosen(): boolean {
    return this[2].toBoolean();
  }
}

export class BookMarketplace__getListingByTokenIdResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get instantPrice(): BigInt {
    return this[3].toBigInt();
  }

  get startingPrice(): BigInt {
    return this[4].toBigInt();
  }

  get allowBid(): boolean {
    return this[5].toBoolean();
  }

  get bidList(): Array<
    BookMarketplace__getListingByTokenIdResultValue0BidListStruct
  > {
    return this[6].toTupleArray<
      BookMarketplace__getListingByTokenIdResultValue0BidListStruct
    >();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class BookMarketplace__getListingByTokenIdResultValue0BidListStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get bidAmount(): BigInt {
    return this[1].toBigInt();
  }

  get chosen(): boolean {
    return this[2].toBoolean();
  }
}

export class BookMarketplace extends ethereum.SmartContract {
  static bind(address: Address): BookMarketplace {
    return new BookMarketplace("BookMarketplace", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchItemsListed(): Array<
    BookMarketplace__fetchItemsListedResultValue0Struct
  > {
    let result = super.call(
      "fetchItemsListed",
      "fetchItemsListed():((uint256,address,address,uint256,uint256,bool,(address,uint256,bool)[],bool)[])",
      []
    );

    return result[0].toTupleArray<
      BookMarketplace__fetchItemsListedResultValue0Struct
    >();
  }

  try_fetchItemsListed(): ethereum.CallResult<
    Array<BookMarketplace__fetchItemsListedResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchItemsListed",
      "fetchItemsListed():((uint256,address,address,uint256,uint256,bool,(address,uint256,bool)[],bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        BookMarketplace__fetchItemsListedResultValue0Struct
      >()
    );
  }

  fetchListings(): Array<BookMarketplace__fetchListingsResultValue0Struct> {
    let result = super.call(
      "fetchListings",
      "fetchListings():((uint256,address,address,uint256,uint256,bool,(address,uint256,bool)[],bool)[])",
      []
    );

    return result[0].toTupleArray<
      BookMarketplace__fetchListingsResultValue0Struct
    >();
  }

  try_fetchListings(): ethereum.CallResult<
    Array<BookMarketplace__fetchListingsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchListings",
      "fetchListings():((uint256,address,address,uint256,uint256,bool,(address,uint256,bool)[],bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BookMarketplace__fetchListingsResultValue0Struct>()
    );
  }

  fetchMyNFTs(): Array<BookMarketplace__fetchMyNFTsResultValue0Struct> {
    let result = super.call(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,address,uint256,uint256,bool,(address,uint256,bool)[],bool)[])",
      []
    );

    return result[0].toTupleArray<
      BookMarketplace__fetchMyNFTsResultValue0Struct
    >();
  }

  try_fetchMyNFTs(): ethereum.CallResult<
    Array<BookMarketplace__fetchMyNFTsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,address,uint256,uint256,bool,(address,uint256,bool)[],bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BookMarketplace__fetchMyNFTsResultValue0Struct>()
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBidList(
    tokenId: BigInt
  ): Array<BookMarketplace__getBidListResultValue0Struct> {
    let result = super.call(
      "getBidList",
      "getBidList(uint256):((address,uint256,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toTupleArray<
      BookMarketplace__getBidListResultValue0Struct
    >();
  }

  try_getBidList(
    tokenId: BigInt
  ): ethereum.CallResult<Array<BookMarketplace__getBidListResultValue0Struct>> {
    let result = super.tryCall(
      "getBidList",
      "getBidList(uint256):((address,uint256,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BookMarketplace__getBidListResultValue0Struct>()
    );
  }

  getBiddingPrice(): BigInt {
    let result = super.call(
      "getBiddingPrice",
      "getBiddingPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBiddingPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBiddingPrice",
      "getBiddingPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHighestBid(
    tokenId: BigInt
  ): BookMarketplace__getHighestBidResultValue0Struct {
    let result = super.call(
      "getHighestBid",
      "getHighestBid(uint256):((address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<BookMarketplace__getHighestBidResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getHighestBid(
    tokenId: BigInt
  ): ethereum.CallResult<BookMarketplace__getHighestBidResultValue0Struct> {
    let result = super.tryCall(
      "getHighestBid",
      "getHighestBid(uint256):((address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BookMarketplace__getHighestBidResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getHighestBidIndex(tokenId: BigInt): BigInt {
    let result = super.call(
      "getHighestBidIndex",
      "getHighestBidIndex(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getHighestBidIndex(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHighestBidIndex",
      "getHighestBidIndex(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHighestBidder(tokenId: BigInt): Address {
    let result = super.call(
      "getHighestBidder",
      "getHighestBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toAddress();
  }

  try_getHighestBidder(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getHighestBidder",
      "getHighestBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInstantPrice(tokenId: BigInt): BigInt {
    let result = super.call(
      "getInstantPrice",
      "getInstantPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getInstantPrice(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInstantPrice",
      "getInstantPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListingByTokenId(
    tokenId: BigInt
  ): BookMarketplace__getListingByTokenIdResultValue0Struct {
    let result = super.call(
      "getListingByTokenId",
      "getListingByTokenId(uint256):((uint256,address,address,uint256,uint256,bool,(address,uint256,bool)[],bool))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<BookMarketplace__getListingByTokenIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListingByTokenId(
    tokenId: BigInt
  ): ethereum.CallResult<
    BookMarketplace__getListingByTokenIdResultValue0Struct
  > {
    let result = super.tryCall(
      "getListingByTokenId",
      "getListingByTokenId(uint256):((uint256,address,address,uint256,uint256,bool,(address,uint256,bool)[],bool))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BookMarketplace__getListingByTokenIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getListingPrice(): BigInt {
    let result = super.call(
      "getListingPrice",
      "getListingPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getListingPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getListingPrice",
      "getListingPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketOwnerAddress(): Address {
    let result = super.call(
      "getMarketOwnerAddress",
      "getMarketOwnerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMarketOwnerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMarketOwnerAddress",
      "getMarketOwnerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasUserBid(tokenId: BigInt, user: Address): boolean {
    let result = super.call(
      "hasUserBid",
      "hasUserBid(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasUserBid(tokenId: BigInt, user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasUserBid",
      "hasUserBid(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptBiddingSaleCall extends ethereum.Call {
  get inputs(): AcceptBiddingSaleCall__Inputs {
    return new AcceptBiddingSaleCall__Inputs(this);
  }

  get outputs(): AcceptBiddingSaleCall__Outputs {
    return new AcceptBiddingSaleCall__Outputs(this);
  }
}

export class AcceptBiddingSaleCall__Inputs {
  _call: AcceptBiddingSaleCall;

  constructor(call: AcceptBiddingSaleCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AcceptBiddingSaleCall__Outputs {
  _call: AcceptBiddingSaleCall;

  constructor(call: AcceptBiddingSaleCall) {
    this._call = call;
  }
}

export class AddBidCall extends ethereum.Call {
  get inputs(): AddBidCall__Inputs {
    return new AddBidCall__Inputs(this);
  }

  get outputs(): AddBidCall__Outputs {
    return new AddBidCall__Outputs(this);
  }
}

export class AddBidCall__Inputs {
  _call: AddBidCall;

  constructor(call: AddBidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddBidCall__Outputs {
  _call: AddBidCall;

  constructor(call: AddBidCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CreateBiddingSaleCall extends ethereum.Call {
  get inputs(): CreateBiddingSaleCall__Inputs {
    return new CreateBiddingSaleCall__Inputs(this);
  }

  get outputs(): CreateBiddingSaleCall__Outputs {
    return new CreateBiddingSaleCall__Outputs(this);
  }
}

export class CreateBiddingSaleCall__Inputs {
  _call: CreateBiddingSaleCall;

  constructor(call: CreateBiddingSaleCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateBiddingSaleCall__Outputs {
  _call: CreateBiddingSaleCall;

  constructor(call: CreateBiddingSaleCall) {
    this._call = call;
  }
}

export class CreateMarketSaleCall extends ethereum.Call {
  get inputs(): CreateMarketSaleCall__Inputs {
    return new CreateMarketSaleCall__Inputs(this);
  }

  get outputs(): CreateMarketSaleCall__Outputs {
    return new CreateMarketSaleCall__Outputs(this);
  }
}

export class CreateMarketSaleCall__Inputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateMarketSaleCall__Outputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get tokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get instantPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get startingPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get allowBid(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MarkListingAsSoldCall extends ethereum.Call {
  get inputs(): MarkListingAsSoldCall__Inputs {
    return new MarkListingAsSoldCall__Inputs(this);
  }

  get outputs(): MarkListingAsSoldCall__Outputs {
    return new MarkListingAsSoldCall__Outputs(this);
  }
}

export class MarkListingAsSoldCall__Inputs {
  _call: MarkListingAsSoldCall;

  constructor(call: MarkListingAsSoldCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MarkListingAsSoldCall__Outputs {
  _call: MarkListingAsSoldCall;

  constructor(call: MarkListingAsSoldCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateAllowBidCall extends ethereum.Call {
  get inputs(): UpdateAllowBidCall__Inputs {
    return new UpdateAllowBidCall__Inputs(this);
  }

  get outputs(): UpdateAllowBidCall__Outputs {
    return new UpdateAllowBidCall__Outputs(this);
  }
}

export class UpdateAllowBidCall__Inputs {
  _call: UpdateAllowBidCall;

  constructor(call: UpdateAllowBidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get allow(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateAllowBidCall__Outputs {
  _call: UpdateAllowBidCall;

  constructor(call: UpdateAllowBidCall) {
    this._call = call;
  }
}

export class UpdateBiddingPriceCall extends ethereum.Call {
  get inputs(): UpdateBiddingPriceCall__Inputs {
    return new UpdateBiddingPriceCall__Inputs(this);
  }

  get outputs(): UpdateBiddingPriceCall__Outputs {
    return new UpdateBiddingPriceCall__Outputs(this);
  }
}

export class UpdateBiddingPriceCall__Inputs {
  _call: UpdateBiddingPriceCall;

  constructor(call: UpdateBiddingPriceCall) {
    this._call = call;
  }

  get _biddingPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateBiddingPriceCall__Outputs {
  _call: UpdateBiddingPriceCall;

  constructor(call: UpdateBiddingPriceCall) {
    this._call = call;
  }
}

export class UpdateInstantPriceCall extends ethereum.Call {
  get inputs(): UpdateInstantPriceCall__Inputs {
    return new UpdateInstantPriceCall__Inputs(this);
  }

  get outputs(): UpdateInstantPriceCall__Outputs {
    return new UpdateInstantPriceCall__Outputs(this);
  }
}

export class UpdateInstantPriceCall__Inputs {
  _call: UpdateInstantPriceCall;

  constructor(call: UpdateInstantPriceCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateInstantPriceCall__Outputs {
  _call: UpdateInstantPriceCall;

  constructor(call: UpdateInstantPriceCall) {
    this._call = call;
  }
}

export class UpdateListingPriceCall extends ethereum.Call {
  get inputs(): UpdateListingPriceCall__Inputs {
    return new UpdateListingPriceCall__Inputs(this);
  }

  get outputs(): UpdateListingPriceCall__Outputs {
    return new UpdateListingPriceCall__Outputs(this);
  }
}

export class UpdateListingPriceCall__Inputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }

  get _listingPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateListingPriceCall__Outputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }
}
